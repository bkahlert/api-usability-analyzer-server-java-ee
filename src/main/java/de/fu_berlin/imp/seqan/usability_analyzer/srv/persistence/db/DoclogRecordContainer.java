package de.fu_berlin.imp.seqan.usability_analyzer.srv.persistence.db;import java.io.Serializable;import org.apache.log4j.Logger;import com.vaadin.data.util.BeanItemContainer;import de.fu_berlin.imp.seqan.usability_analyzer.srv.AppData;import de.fu_berlin.imp.seqan.usability_analyzer.srv.model.Doclog;import de.fu_berlin.imp.seqan.usability_analyzer.srv.model.DoclogRecord;import de.fu_berlin.imp.seqan.usability_analyzer.srv.model.IIdentifier;import de.fu_berlin.imp.seqan.usability_analyzer.srv.persistence.MappingDoclogPersistence;import de.fu_berlin.imp.seqan.usability_analyzer.srv.utils.LocationUtils;public class DoclogRecordContainer extends BeanItemContainer<DoclogRecord>		implements Serializable {	private static final long serialVersionUID = -5893691842287912978L;	private static final Logger LOGGER = Logger			.getLogger(DoclogRecordContainer.class);	public static DoclogRecordContainer create() {		DoclogRecordContainer container;		try {			MappingDoclogPersistence p = LocationUtils					.getDoclogPersistence(AppData.getServletContext());			container = new DoclogRecordContainer();			for (IIdentifier identifier : p.getIdentifiers()) {				container.addAll(p.getDoclog(identifier));			}			return container;		} catch (Exception e) {			LOGGER.error("Error getting " + Doclog.class.getSimpleName() + "s",					e);		}		return null;	}	public DoclogRecordContainer() throws InstantiationException,			IllegalAccessException {		super(DoclogRecord.class);	}}